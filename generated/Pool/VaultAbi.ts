// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class VaultAbi extends ethereum.SmartContract {
  static bind(address: Address): VaultAbi {
    return new VaultAbi("VaultAbi", address);
  }

  aaveOracle(): Address {
    let result = super.call("aaveOracle", "aaveOracle():(address)", []);

    return result[0].toAddress();
  }

  try_aaveOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveOracle", "aaveOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aavePool(): Address {
    let result = super.call("aavePool", "aavePool():(address)", []);

    return result[0].toAddress();
  }

  try_aavePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("aavePool", "aavePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveRewardsController(): Address {
    let result = super.call(
      "aaveRewardsController",
      "aaveRewardsController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveRewardsController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveRewardsController",
      "aaveRewardsController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAssetBalance(market: Address): BigInt {
    let result = super.call(
      "getAssetBalance",
      "getAssetBalance(address):(uint256)",
      [ethereum.Value.fromAddress(market)]
    );

    return result[0].toBigInt();
  }

  try_getAssetBalance(market: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetBalance",
      "getAssetBalance(address):(uint256)",
      [ethereum.Value.fromAddress(market)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetsIn(): Array<Address> {
    let result = super.call("getAssetsIn", "getAssetsIn():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAssetsIn(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getAssetsIn", "getAssetsIn():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getHypotheticalVaultLiquidityChange(
    asset: Address,
    removeAmount: BigInt
  ): BigInt {
    let result = super.call(
      "getHypotheticalVaultLiquidityChange",
      "getHypotheticalVaultLiquidityChange(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(removeAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getHypotheticalVaultLiquidityChange(
    asset: Address,
    removeAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHypotheticalVaultLiquidityChange",
      "getHypotheticalVaultLiquidityChange(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromUnsignedBigInt(removeAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultLiquidity(): BigInt {
    let result = super.call(
      "getVaultLiquidity",
      "getVaultLiquidity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVaultLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVaultLiquidity",
      "getVaultLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nameId(): Bytes {
    let result = super.call("nameId", "nameId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_nameId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("nameId", "nameId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeem(asset: Address, amount: BigInt): BigInt {
    let result = super.call("redeem", "redeem(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(asset),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(asset: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(asset),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferAll(asset: Address, to: Address): BigInt {
    let result = super.call(
      "transferAll",
      "transferAll(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(to)]
    );

    return result[0].toBigInt();
  }

  try_transferAll(asset: Address, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferAll",
      "transferAll(address,address):(uint256)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultLiquidityMultiplier(): BigInt {
    let result = super.call(
      "vaultLiquidityMultiplier",
      "vaultLiquidityMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_vaultLiquidityMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultLiquidityMultiplier",
      "vaultLiquidityMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  versionId(): Bytes {
    let result = super.call("versionId", "versionId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_versionId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("versionId", "versionId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get pool_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weth_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get aavePool_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get aaveOracle_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get aaveRewardsController_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get vaultLiquidityMultiplier_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimStakedAaveCall extends ethereum.Call {
  get inputs(): ClaimStakedAaveCall__Inputs {
    return new ClaimStakedAaveCall__Inputs(this);
  }

  get outputs(): ClaimStakedAaveCall__Outputs {
    return new ClaimStakedAaveCall__Outputs(this);
  }
}

export class ClaimStakedAaveCall__Inputs {
  _call: ClaimStakedAaveCall;

  constructor(call: ClaimStakedAaveCall) {
    this._call = call;
  }

  get markets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get reward(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimStakedAaveCall__Outputs {
  _call: ClaimStakedAaveCall;

  constructor(call: ClaimStakedAaveCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get withdrawnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferAllCall extends ethereum.Call {
  get inputs(): TransferAllCall__Inputs {
    return new TransferAllCall__Inputs(this);
  }

  get outputs(): TransferAllCall__Outputs {
    return new TransferAllCall__Outputs(this);
  }
}

export class TransferAllCall__Inputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferAllCall__Outputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
