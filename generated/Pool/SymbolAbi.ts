// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SymbolAbi__positionsResultValue0Struct extends ethereum.Tuple {
  get volume(): BigInt {
    return this[0].toBigInt();
  }

  get cost(): BigInt {
    return this[1].toBigInt();
  }

  get cumulativeFundingPerVolume(): BigInt {
    return this[2].toBigInt();
  }
}

export class SymbolAbi extends ethereum.SmartContract {
  static bind(address: Address): SymbolAbi {
    return new SymbolAbi("SymbolAbi", address);
  }

  nameId(): Bytes {
    let result = super.call("nameId", "nameId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_nameId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("nameId", "nameId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  versionId(): Bytes {
    let result = super.call("versionId", "versionId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_versionId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("versionId", "versionId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbolId(): Bytes {
    let result = super.call("symbolId", "symbolId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_symbolId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("symbolId", "symbolId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  alpha(): BigInt {
    let result = super.call("alpha", "alpha():(int256)", []);

    return result[0].toBigInt();
  }

  try_alpha(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("alpha", "alpha():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeFundingPerVolume(): BigInt {
    let result = super.call(
      "cumulativeFundingPerVolume",
      "cumulativeFundingPerVolume():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cumulativeFundingPerVolume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeFundingPerVolume",
      "cumulativeFundingPerVolume():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRatio(): BigInt {
    let result = super.call("feeRatio", "feeRatio():(int256)", []);

    return result[0].toBigInt();
  }

  try_feeRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRatio", "feeRatio():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRatioITM(): BigInt {
    let result = super.call("feeRatioITM", "feeRatioITM():(int256)", []);

    return result[0].toBigInt();
  }

  try_feeRatioITM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRatioITM", "feeRatioITM():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRatioOTM(): BigInt {
    let result = super.call("feeRatioOTM", "feeRatioOTM():(int256)", []);

    return result[0].toBigInt();
  }

  try_feeRatioOTM(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRatioOTM", "feeRatioOTM():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingPeriod(): BigInt {
    let result = super.call("fundingPeriod", "fundingPeriod():(int256)", []);

    return result[0].toBigInt();
  }

  try_fundingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundingPeriod", "fundingPeriod():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingTimestamp(): BigInt {
    let result = super.call(
      "fundingTimestamp",
      "fundingTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fundingTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingTimestamp",
      "fundingTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPosition(pTokenId: BigInt): boolean {
    let result = super.call("hasPosition", "hasPosition(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(pTokenId)
    ]);

    return result[0].toBoolean();
  }

  try_hasPosition(pTokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPosition", "hasPosition(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(pTokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  indexPrice(): BigInt {
    let result = super.call("indexPrice", "indexPrice():(int256)", []);

    return result[0].toBigInt();
  }

  try_indexPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexPrice", "indexPrice():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialMarginRatio(): BigInt {
    let result = super.call(
      "initialMarginRatio",
      "initialMarginRatio():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initialMarginRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialMarginRatio",
      "initialMarginRatio():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialMarginRequired(): BigInt {
    let result = super.call(
      "initialMarginRequired",
      "initialMarginRequired():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initialMarginRequired(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialMarginRequired",
      "initialMarginRequired():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCall(): boolean {
    let result = super.call("isCall", "isCall():(bool)", []);

    return result[0].toBoolean();
  }

  try_isCall(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCall", "isCall():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCloseOnly(): boolean {
    let result = super.call("isCloseOnly", "isCloseOnly():(bool)", []);

    return result[0].toBoolean();
  }

  try_isCloseOnly(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCloseOnly", "isCloseOnly():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maintenanceMarginRatio(): BigInt {
    let result = super.call(
      "maintenanceMarginRatio",
      "maintenanceMarginRatio():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maintenanceMarginRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maintenanceMarginRatio",
      "maintenanceMarginRatio():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minInitialMarginRatio(): BigInt {
    let result = super.call(
      "minInitialMarginRatio",
      "minInitialMarginRatio():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minInitialMarginRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minInitialMarginRatio",
      "minInitialMarginRatio():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minTradeVolume(): BigInt {
    let result = super.call("minTradeVolume", "minTradeVolume():(int256)", []);

    return result[0].toBigInt();
  }

  try_minTradeVolume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minTradeVolume",
      "minTradeVolume():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nPositionHolders(): BigInt {
    let result = super.call(
      "nPositionHolders",
      "nPositionHolders():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nPositionHolders(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nPositionHolders",
      "nPositionHolders():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  netCost(): BigInt {
    let result = super.call("netCost", "netCost():(int256)", []);

    return result[0].toBigInt();
  }

  try_netCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("netCost", "netCost():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  netVolume(): BigInt {
    let result = super.call("netVolume", "netVolume():(int256)", []);

    return result[0].toBigInt();
  }

  try_netVolume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("netVolume", "netVolume():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracleManager(): Address {
    let result = super.call("oracleManager", "oracleManager():(address)", []);

    return result[0].toAddress();
  }

  try_oracleManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleManager",
      "oracleManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(pTokenId: BigInt): SymbolAbi__positionsResultValue0Struct {
    let result = super.call(
      "positions",
      "positions(uint256):((int256,int256,int256))",
      [ethereum.Value.fromUnsignedBigInt(pTokenId)]
    );

    return changetype<SymbolAbi__positionsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_positions(
    pTokenId: BigInt
  ): ethereum.CallResult<SymbolAbi__positionsResultValue0Struct> {
    let result = super.tryCall(
      "positions",
      "positions(uint256):((int256,int256,int256))",
      [ethereum.Value.fromUnsignedBigInt(pTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbolAbi__positionsResultValue0Struct>(value[0].toTuple())
    );
  }

  priceId(): Bytes {
    let result = super.call("priceId", "priceId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_priceId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("priceId", "priceId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pricePercentThreshold(): BigInt {
    let result = super.call(
      "pricePercentThreshold",
      "pricePercentThreshold():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pricePercentThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePercentThreshold",
      "pricePercentThreshold():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  strikePrice(): BigInt {
    let result = super.call("strikePrice", "strikePrice():(int256)", []);

    return result[0].toBigInt();
  }

  try_strikePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("strikePrice", "strikePrice():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeThreshold(): BigInt {
    let result = super.call("timeThreshold", "timeThreshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timeThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeThreshold",
      "timeThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradersPnl(): BigInt {
    let result = super.call("tradersPnl", "tradersPnl():(int256)", []);

    return result[0].toBigInt();
  }

  try_tradersPnl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tradersPnl", "tradersPnl():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  volatilityId(): Bytes {
    let result = super.call("volatilityId", "volatilityId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_volatilityId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("volatilityId", "volatilityId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}
