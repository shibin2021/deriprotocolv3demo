// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddSymbol extends ethereum.Event {
  get params(): AddSymbol__Params {
    return new AddSymbol__Params(this);
  }
}

export class AddSymbol__Params {
  _event: AddSymbol;

  constructor(event: AddSymbol) {
    this._event = event;
  }

  get symbolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get symbol(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get newAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewImplementation extends ethereum.Event {
  get params(): NewImplementation__Params {
    return new NewImplementation__Params(this);
  }
}

export class NewImplementation__Params {
  _event: NewImplementation;

  constructor(event: NewImplementation) {
    this._event = event;
  }

  get newImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveSymbol extends ethereum.Event {
  get params(): RemoveSymbol__Params {
    return new RemoveSymbol__Params(this);
  }
}

export class RemoveSymbol__Params {
  _event: RemoveSymbol;

  constructor(event: RemoveSymbol) {
    this._event = event;
  }

  get symbolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get symbol(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get pTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get symbolId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get indexPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tradeVolume(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tradeCost(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tradeFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SymbolManagerAbi__settleSymbolsOnAddLiquidityResultSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }
}

export class SymbolManagerAbi__settleSymbolsOnLiquidateResultSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get traderFunding(): BigInt {
    return this[2].toBigInt();
  }

  get traderPnl(): BigInt {
    return this[3].toBigInt();
  }

  get traderMaintenanceMarginRequired(): BigInt {
    return this[4].toBigInt();
  }

  get traderRealizedCost(): BigInt {
    return this[5].toBigInt();
  }
}

export class SymbolManagerAbi__settleSymbolsOnRemoveLiquidityResultSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get initialMarginRequired(): BigInt {
    return this[2].toBigInt();
  }

  get removeLiquidityPenalty(): BigInt {
    return this[3].toBigInt();
  }
}

export class SymbolManagerAbi__settleSymbolsOnRemoveMarginResultSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get traderFunding(): BigInt {
    return this[2].toBigInt();
  }

  get traderPnl(): BigInt {
    return this[3].toBigInt();
  }

  get traderInitialMarginRequired(): BigInt {
    return this[4].toBigInt();
  }
}

export class SymbolManagerAbi__settleSymbolsOnTradeResultSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get initialMarginRequired(): BigInt {
    return this[2].toBigInt();
  }

  get traderFunding(): BigInt {
    return this[3].toBigInt();
  }

  get traderPnl(): BigInt {
    return this[4].toBigInt();
  }

  get traderInitialMarginRequired(): BigInt {
    return this[5].toBigInt();
  }

  get tradeFee(): BigInt {
    return this[6].toBigInt();
  }

  get tradeRealizedCost(): BigInt {
    return this[7].toBigInt();
  }
}

export class SymbolManagerAbi extends ethereum.SmartContract {
  static bind(address: Address): SymbolManagerAbi {
    return new SymbolManagerAbi("SymbolManagerAbi", address);
  }

  activeSymbols(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "activeSymbols",
      "activeSymbols(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_activeSymbols(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "activeSymbols",
      "activeSymbols(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActiveSymbols(pTokenId: BigInt): Array<Address> {
    let result = super.call(
      "getActiveSymbols",
      "getActiveSymbols(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(pTokenId)]
    );

    return result[0].toAddressArray();
  }

  try_getActiveSymbols(pTokenId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getActiveSymbols",
      "getActiveSymbols(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(pTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSymbolsLength(): BigInt {
    let result = super.call(
      "getSymbolsLength",
      "getSymbolsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSymbolsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSymbolsLength",
      "getSymbolsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  indexedSymbols(param0: BigInt): Address {
    let result = super.call(
      "indexedSymbols",
      "indexedSymbols(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_indexedSymbols(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "indexedSymbols",
      "indexedSymbols(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialMarginRequired(): BigInt {
    let result = super.call(
      "initialMarginRequired",
      "initialMarginRequired():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initialMarginRequired(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialMarginRequired",
      "initialMarginRequired():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nameId(): Bytes {
    let result = super.call("nameId", "nameId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_nameId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("nameId", "nameId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settleSymbolsOnAddLiquidity(
    liquidity: BigInt
  ): SymbolManagerAbi__settleSymbolsOnAddLiquidityResultSsStruct {
    let result = super.call(
      "settleSymbolsOnAddLiquidity",
      "settleSymbolsOnAddLiquidity(int256):((int256,int256))",
      [ethereum.Value.fromSignedBigInt(liquidity)]
    );

    return changetype<
      SymbolManagerAbi__settleSymbolsOnAddLiquidityResultSsStruct
    >(result[0].toTuple());
  }

  try_settleSymbolsOnAddLiquidity(
    liquidity: BigInt
  ): ethereum.CallResult<
    SymbolManagerAbi__settleSymbolsOnAddLiquidityResultSsStruct
  > {
    let result = super.tryCall(
      "settleSymbolsOnAddLiquidity",
      "settleSymbolsOnAddLiquidity(int256):((int256,int256))",
      [ethereum.Value.fromSignedBigInt(liquidity)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbolManagerAbi__settleSymbolsOnAddLiquidityResultSsStruct>(
        value[0].toTuple()
      )
    );
  }

  settleSymbolsOnLiquidate(
    pTokenId: BigInt,
    liquidity: BigInt
  ): SymbolManagerAbi__settleSymbolsOnLiquidateResultSsStruct {
    let result = super.call(
      "settleSymbolsOnLiquidate",
      "settleSymbolsOnLiquidate(uint256,int256):((int256,int256,int256,int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(pTokenId),
        ethereum.Value.fromSignedBigInt(liquidity)
      ]
    );

    return changetype<SymbolManagerAbi__settleSymbolsOnLiquidateResultSsStruct>(
      result[0].toTuple()
    );
  }

  try_settleSymbolsOnLiquidate(
    pTokenId: BigInt,
    liquidity: BigInt
  ): ethereum.CallResult<
    SymbolManagerAbi__settleSymbolsOnLiquidateResultSsStruct
  > {
    let result = super.tryCall(
      "settleSymbolsOnLiquidate",
      "settleSymbolsOnLiquidate(uint256,int256):((int256,int256,int256,int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(pTokenId),
        ethereum.Value.fromSignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbolManagerAbi__settleSymbolsOnLiquidateResultSsStruct>(
        value[0].toTuple()
      )
    );
  }

  settleSymbolsOnRemoveLiquidity(
    liquidity: BigInt,
    removedLiquidity: BigInt
  ): SymbolManagerAbi__settleSymbolsOnRemoveLiquidityResultSsStruct {
    let result = super.call(
      "settleSymbolsOnRemoveLiquidity",
      "settleSymbolsOnRemoveLiquidity(int256,int256):((int256,int256,int256,int256))",
      [
        ethereum.Value.fromSignedBigInt(liquidity),
        ethereum.Value.fromSignedBigInt(removedLiquidity)
      ]
    );

    return changetype<
      SymbolManagerAbi__settleSymbolsOnRemoveLiquidityResultSsStruct
    >(result[0].toTuple());
  }

  try_settleSymbolsOnRemoveLiquidity(
    liquidity: BigInt,
    removedLiquidity: BigInt
  ): ethereum.CallResult<
    SymbolManagerAbi__settleSymbolsOnRemoveLiquidityResultSsStruct
  > {
    let result = super.tryCall(
      "settleSymbolsOnRemoveLiquidity",
      "settleSymbolsOnRemoveLiquidity(int256,int256):((int256,int256,int256,int256))",
      [
        ethereum.Value.fromSignedBigInt(liquidity),
        ethereum.Value.fromSignedBigInt(removedLiquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        SymbolManagerAbi__settleSymbolsOnRemoveLiquidityResultSsStruct
      >(value[0].toTuple())
    );
  }

  settleSymbolsOnRemoveMargin(
    pTokenId: BigInt,
    liquidity: BigInt
  ): SymbolManagerAbi__settleSymbolsOnRemoveMarginResultSsStruct {
    let result = super.call(
      "settleSymbolsOnRemoveMargin",
      "settleSymbolsOnRemoveMargin(uint256,int256):((int256,int256,int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(pTokenId),
        ethereum.Value.fromSignedBigInt(liquidity)
      ]
    );

    return changetype<
      SymbolManagerAbi__settleSymbolsOnRemoveMarginResultSsStruct
    >(result[0].toTuple());
  }

  try_settleSymbolsOnRemoveMargin(
    pTokenId: BigInt,
    liquidity: BigInt
  ): ethereum.CallResult<
    SymbolManagerAbi__settleSymbolsOnRemoveMarginResultSsStruct
  > {
    let result = super.tryCall(
      "settleSymbolsOnRemoveMargin",
      "settleSymbolsOnRemoveMargin(uint256,int256):((int256,int256,int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(pTokenId),
        ethereum.Value.fromSignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbolManagerAbi__settleSymbolsOnRemoveMarginResultSsStruct>(
        value[0].toTuple()
      )
    );
  }

  settleSymbolsOnTrade(
    pTokenId: BigInt,
    symbolId: Bytes,
    tradeVolume: BigInt,
    liquidity: BigInt
  ): SymbolManagerAbi__settleSymbolsOnTradeResultSsStruct {
    let result = super.call(
      "settleSymbolsOnTrade",
      "settleSymbolsOnTrade(uint256,bytes32,int256,int256):((int256,int256,int256,int256,int256,int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(pTokenId),
        ethereum.Value.fromFixedBytes(symbolId),
        ethereum.Value.fromSignedBigInt(tradeVolume),
        ethereum.Value.fromSignedBigInt(liquidity)
      ]
    );

    return changetype<SymbolManagerAbi__settleSymbolsOnTradeResultSsStruct>(
      result[0].toTuple()
    );
  }

  try_settleSymbolsOnTrade(
    pTokenId: BigInt,
    symbolId: Bytes,
    tradeVolume: BigInt,
    liquidity: BigInt
  ): ethereum.CallResult<SymbolManagerAbi__settleSymbolsOnTradeResultSsStruct> {
    let result = super.tryCall(
      "settleSymbolsOnTrade",
      "settleSymbolsOnTrade(uint256,bytes32,int256,int256):((int256,int256,int256,int256,int256,int256,int256,int256))",
      [
        ethereum.Value.fromUnsignedBigInt(pTokenId),
        ethereum.Value.fromFixedBytes(symbolId),
        ethereum.Value.fromSignedBigInt(tradeVolume),
        ethereum.Value.fromSignedBigInt(liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbolManagerAbi__settleSymbolsOnTradeResultSsStruct>(
        value[0].toTuple()
      )
    );
  }

  symbols(param0: Bytes): Address {
    let result = super.call("symbols", "symbols(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_symbols(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("symbols", "symbols(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  versionId(): Bytes {
    let result = super.call("versionId", "versionId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_versionId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("versionId", "versionId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get pool_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSymbolCall extends ethereum.Call {
  get inputs(): AddSymbolCall__Inputs {
    return new AddSymbolCall__Inputs(this);
  }

  get outputs(): AddSymbolCall__Outputs {
    return new AddSymbolCall__Outputs(this);
  }
}

export class AddSymbolCall__Inputs {
  _call: AddSymbolCall;

  constructor(call: AddSymbolCall) {
    this._call = call;
  }

  get symbol(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddSymbolCall__Outputs {
  _call: AddSymbolCall;

  constructor(call: AddSymbolCall) {
    this._call = call;
  }
}

export class RemoveSymbolCall extends ethereum.Call {
  get inputs(): RemoveSymbolCall__Inputs {
    return new RemoveSymbolCall__Inputs(this);
  }

  get outputs(): RemoveSymbolCall__Outputs {
    return new RemoveSymbolCall__Outputs(this);
  }
}

export class RemoveSymbolCall__Inputs {
  _call: RemoveSymbolCall;

  constructor(call: RemoveSymbolCall) {
    this._call = call;
  }

  get symbolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveSymbolCall__Outputs {
  _call: RemoveSymbolCall;

  constructor(call: RemoveSymbolCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class SettleSymbolsOnAddLiquidityCall extends ethereum.Call {
  get inputs(): SettleSymbolsOnAddLiquidityCall__Inputs {
    return new SettleSymbolsOnAddLiquidityCall__Inputs(this);
  }

  get outputs(): SettleSymbolsOnAddLiquidityCall__Outputs {
    return new SettleSymbolsOnAddLiquidityCall__Outputs(this);
  }
}

export class SettleSymbolsOnAddLiquidityCall__Inputs {
  _call: SettleSymbolsOnAddLiquidityCall;

  constructor(call: SettleSymbolsOnAddLiquidityCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SettleSymbolsOnAddLiquidityCall__Outputs {
  _call: SettleSymbolsOnAddLiquidityCall;

  constructor(call: SettleSymbolsOnAddLiquidityCall) {
    this._call = call;
  }

  get ss(): SettleSymbolsOnAddLiquidityCallSsStruct {
    return changetype<SettleSymbolsOnAddLiquidityCallSsStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class SettleSymbolsOnAddLiquidityCallSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }
}

export class SettleSymbolsOnLiquidateCall extends ethereum.Call {
  get inputs(): SettleSymbolsOnLiquidateCall__Inputs {
    return new SettleSymbolsOnLiquidateCall__Inputs(this);
  }

  get outputs(): SettleSymbolsOnLiquidateCall__Outputs {
    return new SettleSymbolsOnLiquidateCall__Outputs(this);
  }
}

export class SettleSymbolsOnLiquidateCall__Inputs {
  _call: SettleSymbolsOnLiquidateCall;

  constructor(call: SettleSymbolsOnLiquidateCall) {
    this._call = call;
  }

  get pTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleSymbolsOnLiquidateCall__Outputs {
  _call: SettleSymbolsOnLiquidateCall;

  constructor(call: SettleSymbolsOnLiquidateCall) {
    this._call = call;
  }

  get ss(): SettleSymbolsOnLiquidateCallSsStruct {
    return changetype<SettleSymbolsOnLiquidateCallSsStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class SettleSymbolsOnLiquidateCallSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get traderFunding(): BigInt {
    return this[2].toBigInt();
  }

  get traderPnl(): BigInt {
    return this[3].toBigInt();
  }

  get traderMaintenanceMarginRequired(): BigInt {
    return this[4].toBigInt();
  }

  get traderRealizedCost(): BigInt {
    return this[5].toBigInt();
  }
}

export class SettleSymbolsOnRemoveLiquidityCall extends ethereum.Call {
  get inputs(): SettleSymbolsOnRemoveLiquidityCall__Inputs {
    return new SettleSymbolsOnRemoveLiquidityCall__Inputs(this);
  }

  get outputs(): SettleSymbolsOnRemoveLiquidityCall__Outputs {
    return new SettleSymbolsOnRemoveLiquidityCall__Outputs(this);
  }
}

export class SettleSymbolsOnRemoveLiquidityCall__Inputs {
  _call: SettleSymbolsOnRemoveLiquidityCall;

  constructor(call: SettleSymbolsOnRemoveLiquidityCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get removedLiquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleSymbolsOnRemoveLiquidityCall__Outputs {
  _call: SettleSymbolsOnRemoveLiquidityCall;

  constructor(call: SettleSymbolsOnRemoveLiquidityCall) {
    this._call = call;
  }

  get ss(): SettleSymbolsOnRemoveLiquidityCallSsStruct {
    return changetype<SettleSymbolsOnRemoveLiquidityCallSsStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class SettleSymbolsOnRemoveLiquidityCallSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get initialMarginRequired(): BigInt {
    return this[2].toBigInt();
  }

  get removeLiquidityPenalty(): BigInt {
    return this[3].toBigInt();
  }
}

export class SettleSymbolsOnRemoveMarginCall extends ethereum.Call {
  get inputs(): SettleSymbolsOnRemoveMarginCall__Inputs {
    return new SettleSymbolsOnRemoveMarginCall__Inputs(this);
  }

  get outputs(): SettleSymbolsOnRemoveMarginCall__Outputs {
    return new SettleSymbolsOnRemoveMarginCall__Outputs(this);
  }
}

export class SettleSymbolsOnRemoveMarginCall__Inputs {
  _call: SettleSymbolsOnRemoveMarginCall;

  constructor(call: SettleSymbolsOnRemoveMarginCall) {
    this._call = call;
  }

  get pTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleSymbolsOnRemoveMarginCall__Outputs {
  _call: SettleSymbolsOnRemoveMarginCall;

  constructor(call: SettleSymbolsOnRemoveMarginCall) {
    this._call = call;
  }

  get ss(): SettleSymbolsOnRemoveMarginCallSsStruct {
    return changetype<SettleSymbolsOnRemoveMarginCallSsStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class SettleSymbolsOnRemoveMarginCallSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get traderFunding(): BigInt {
    return this[2].toBigInt();
  }

  get traderPnl(): BigInt {
    return this[3].toBigInt();
  }

  get traderInitialMarginRequired(): BigInt {
    return this[4].toBigInt();
  }
}

export class SettleSymbolsOnTradeCall extends ethereum.Call {
  get inputs(): SettleSymbolsOnTradeCall__Inputs {
    return new SettleSymbolsOnTradeCall__Inputs(this);
  }

  get outputs(): SettleSymbolsOnTradeCall__Outputs {
    return new SettleSymbolsOnTradeCall__Outputs(this);
  }
}

export class SettleSymbolsOnTradeCall__Inputs {
  _call: SettleSymbolsOnTradeCall;

  constructor(call: SettleSymbolsOnTradeCall) {
    this._call = call;
  }

  get pTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get symbolId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get tradeVolume(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SettleSymbolsOnTradeCall__Outputs {
  _call: SettleSymbolsOnTradeCall;

  constructor(call: SettleSymbolsOnTradeCall) {
    this._call = call;
  }

  get ss(): SettleSymbolsOnTradeCallSsStruct {
    return changetype<SettleSymbolsOnTradeCallSsStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class SettleSymbolsOnTradeCallSsStruct extends ethereum.Tuple {
  get funding(): BigInt {
    return this[0].toBigInt();
  }

  get deltaTradersPnl(): BigInt {
    return this[1].toBigInt();
  }

  get initialMarginRequired(): BigInt {
    return this[2].toBigInt();
  }

  get traderFunding(): BigInt {
    return this[3].toBigInt();
  }

  get traderPnl(): BigInt {
    return this[4].toBigInt();
  }

  get traderInitialMarginRequired(): BigInt {
    return this[5].toBigInt();
  }

  get tradeFee(): BigInt {
    return this[6].toBigInt();
  }

  get tradeRealizedCost(): BigInt {
    return this[7].toBigInt();
  }
}
