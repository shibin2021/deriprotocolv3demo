// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Liquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Liquidity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Liquidity", id.toString(), this);
    }
  }

  static load(id: string): Liquidity | null {
    return changetype<Liquidity | null>(store.get("Liquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get bTokenId(): Bytes {
    let value = this.get("bTokenId");
    return value!.toBytes();
  }

  set bTokenId(value: Bytes) {
    this.set("bTokenId", Value.fromBytes(value));
  }

  get lTokenId(): BigInt {
    let value = this.get("lTokenId");
    return value!.toBigInt();
  }

  set lTokenId(value: BigInt) {
    this.set("lTokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get newLiquidity(): BigInt {
    let value = this.get("newLiquidity");
    return value!.toBigInt();
  }

  set newLiquidity(value: BigInt) {
    this.set("newLiquidity", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get implementation(): Bytes | null {
    let value = this.get("implementation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set implementation(value: Bytes | null) {
    if (!value) {
      this.unset("implementation");
    } else {
      this.set("implementation", Value.fromBytes(<Bytes>value));
    }
  }

  get pToken(): Bytes | null {
    let value = this.get("pToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pToken(value: Bytes | null) {
    if (!value) {
      this.unset("pToken");
    } else {
      this.set("pToken", Value.fromBytes(<Bytes>value));
    }
  }

  get lToken(): Bytes | null {
    let value = this.get("lToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lToken(value: Bytes | null) {
    if (!value) {
      this.unset("lToken");
    } else {
      this.set("lToken", Value.fromBytes(<Bytes>value));
    }
  }

  get symbolManager(): Bytes | null {
    let value = this.get("symbolManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set symbolManager(value: Bytes | null) {
    if (!value) {
      this.unset("symbolManager");
    } else {
      this.set("symbolManager", Value.fromBytes(<Bytes>value));
    }
  }

  get swapper(): Bytes | null {
    let value = this.get("swapper");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set swapper(value: Bytes | null) {
    if (!value) {
      this.unset("swapper");
    } else {
      this.set("swapper", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenB0(): Bytes | null {
    let value = this.get("tokenB0");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenB0(value: Bytes | null) {
    if (!value) {
      this.unset("tokenB0");
    } else {
      this.set("tokenB0", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenWETH(): Bytes | null {
    let value = this.get("tokenWETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenWETH(value: Bytes | null) {
    if (!value) {
      this.unset("tokenWETH");
    } else {
      this.set("tokenWETH", Value.fromBytes(<Bytes>value));
    }
  }

  get vaultImplementation(): Bytes | null {
    let value = this.get("vaultImplementation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set vaultImplementation(value: Bytes | null) {
    if (!value) {
      this.unset("vaultImplementation");
    } else {
      this.set("vaultImplementation", Value.fromBytes(<Bytes>value));
    }
  }

  get protocolFeeCollector(): Bytes | null {
    let value = this.get("protocolFeeCollector");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set protocolFeeCollector(value: Bytes | null) {
    if (!value) {
      this.unset("protocolFeeCollector");
    } else {
      this.set("protocolFeeCollector", Value.fromBytes(<Bytes>value));
    }
  }
}
