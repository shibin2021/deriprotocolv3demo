// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pool extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Pool must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get admin(): Bytes | null {
    let value = this.get("admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set admin(value: Bytes | null) {
    if (!value) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromBytes(<Bytes>value));
    }
  }

  get implementation(): Bytes | null {
    let value = this.get("implementation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set implementation(value: Bytes | null) {
    if (!value) {
      this.unset("implementation");
    } else {
      this.set("implementation", Value.fromBytes(<Bytes>value));
    }
  }

  get markets(): Array<Bytes> {
    let value = this.get("markets");
    return value!.toBytesArray();
  }

  set markets(value: Array<Bytes>) {
    this.set("markets", Value.fromBytesArray(value));
  }
}
