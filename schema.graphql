type DToken @entity {
  id: ID!
  name: String!
  ownerTokenId: [OwnerTokenId!]! @derivedFrom(field: "token")
}

type OwnerTokenId @entity {
  id: ID!
  owner: Bytes!
  tokenId: String!
  token: DToken!
  timestamp: Int!
}

type LiquidityHistory @entity {
  id: ID!
  pool: Pool!
  account: Bytes!
  bTokenAddress: Bytes!
  bToken: String!
  lTokenId: BigInt!
  amount: BigInt!
  newLiquidity: BigInt!
  timestamp: Int!
}

type Liquidity @entity {
  id: ID!
  pool: Pool!
  poolAccount: PoolAccount!
  # account: Bytes!
  bTokenAddress: Bytes!
  bToken: String!
  lTokenId: BigInt!
  liquidity: BigInt!
  timestamp: Int!
}


type MarginHistory @entity {
  id: ID!
  pool: Pool!
  account: Bytes!
  bTokenAddress: Bytes!
  bToken: String!
  pTokenId: BigInt!
  amount: BigInt!
  newMargin: BigInt!
  timestamp: Int!
}

type Margin @entity {
  id: ID!
  pool: Pool!
  poolAccount: PoolAccount!
  # account: Bytes!
  bTokenAddress: Bytes!
  bToken: String!
  pTokenId: BigInt!
  margin: BigInt!
  timestamp: Int!
}

type TradeHistory @entity {
  id: ID!
  pool: Pool!
  account: Bytes!
  symbol: String!
  symbolId: Bytes!
  pTokenId: BigInt!
  indexPrice: BigInt!
  tradeVolume: BigInt!
  tradeCost: BigInt!
  tradeFee: BigInt!
  timestamp: Int!
}

type Position @entity {
  id: ID!
  pool: Pool!
  poolAccount: PoolAccount!
  symbol: String!
  symbolId: Bytes!
  pTokenId: BigInt!
  volume: BigInt!
  timestamp: Int!
}

type Pool @entity {
  id: ID!
  admin: Bytes!
  implementation: Bytes!
  pToken: DToken!
  lToken: DToken!
  symbolManager: SymbolManager!
  swapper: Bytes!
  tokenB0: Bytes!
  tokenWETH: Bytes!
  vaultImplementation: Bytes!
  protocolFeeCollector: Bytes!
  poolLiquidity: BigDecimal!
  liquidityHistory: [LiquidityHistory!]! @derivedFrom(field: "pool")
  tradeHistory: [TradeHistory!]! @derivedFrom(field: "pool")
  liquidity: [Liquidity!]! @derivedFrom(field: "pool")
  margin: [Margin!]! @derivedFrom(field: "pool")
  position: [Position!]! @derivedFrom(field: "pool")
}

type SymbolManager @entity {
  id: ID!
  pool: Pool!
}

type PoolAccount @entity {
  id: ID!
  account: Account!
  pool: Pool!
  pTokenId: BigInt!
  lTokenId: BigInt!
  positions: [Position!]! @derivedFrom(field: "poolAccount")
  liquidities: [Liquidity!]! @derivedFrom(field: "poolAccount")
  margins: [Margin!]! @derivedFrom(field: "poolAccount")
}

type Account @entity {
  id: ID!
  pools: [PoolAccount!]! @derivedFrom(field: "account")
}

